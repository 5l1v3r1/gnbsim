commit e375bf1af8410fbf9fa0277b2f6cc77aecbf6298
Author: Ajay Lotan Thakur <thakur.ajay@gmail.com>
Date:   Fri May 14 21:00:38 2021 -0600

    Fixing nas decoding to get assigned UE address

diff --git a/nasMessage/NAS_DLNASTransport.go b/nasMessage/NAS_DLNASTransport.go
index 1c0c7da..750728b 100644
--- a/nasMessage/NAS_DLNASTransport.go
+++ b/nasMessage/NAS_DLNASTransport.go
@@ -1,9 +1,9 @@
 package nasMessage
 
 import (
-	"github.com/free5gc/nas/nasType"
 	"bytes"
 	"encoding/binary"
+	"github.com/free5gc/nas/nasType"
 )
 
 type DLNASTransport struct {
@@ -16,6 +16,7 @@ type DLNASTransport struct {
 	*nasType.AdditionalInformation
 	*nasType.Cause5GMM
 	*nasType.BackoffTimerValue
+	Ipaddr string
 }
 
 func NewDLNASTransport(iei uint8) (dLNASTransport *DLNASTransport) {
@@ -59,6 +60,7 @@ func (a *DLNASTransport) EncodeDLNASTransport(buffer *bytes.Buffer) {
 
 func (a *DLNASTransport) DecodeDLNASTransport(byteArray *[]byte) {
 	buffer := bytes.NewBuffer(*byteArray)
+	fmt.Println("a  before ", a)
 	binary.Read(buffer, binary.BigEndian, &a.ExtendedProtocolDiscriminator.Octet)
 	binary.Read(buffer, binary.BigEndian, &a.SpareHalfOctetAndSecurityHeaderType.Octet)
 	binary.Read(buffer, binary.BigEndian, &a.DLNASTRANSPORTMessageIdentity.Octet)
@@ -66,6 +68,69 @@ func (a *DLNASTransport) DecodeDLNASTransport(byteArray *[]byte) {
 	binary.Read(buffer, binary.BigEndian, &a.PayloadContainer.Len)
 	a.PayloadContainer.SetLen(a.PayloadContainer.GetLen())
 	binary.Read(buffer, binary.BigEndian, &a.PayloadContainer.Buffer)
+	fmt.Println("Protocol Des ", a.ExtendedProtocolDiscriminator)
+	fmt.Println("Message identity ", a.DLNASTRANSPORTMessageIdentity)
+	fmt.Println("payload container type ", a.SpareHalfOctetAndPayloadContainerType)
+	fmt.Println("payload container len ", a.PayloadContainer.Len)
+	if a.SpareHalfOctetAndPayloadContainerType.Octet == uint8(1) {
+		fmt.Println("*****")
+		fmt.Println("buf ", a.PayloadContainer.Buffer)
+		esmMsg := bytes.NewBuffer(a.PayloadContainer.Buffer)
+		fmt.Println("\n")
+		var pd uint8
+		binary.Read(esmMsg, binary.BigEndian, &pd)
+		fmt.Println("Protocol Des ", pd)
+		binary.Read(esmMsg, binary.BigEndian, &pd)
+		fmt.Println("PDU Session Id ", pd)
+		binary.Read(esmMsg, binary.BigEndian, &pd)
+		fmt.Println("PTI ", pd)
+		binary.Read(esmMsg, binary.BigEndian, &pd)
+		fmt.Println("msg type ", pd)
+		binary.Read(esmMsg, binary.BigEndian, &pd)
+		fmt.Println("session type , ssc mode ", pd)
+		var len uint16
+		binary.Read(esmMsg, binary.BigEndian, &len)
+		fmt.Println("qos len  ", len)
+		var qos [9]uint8
+		binary.Read(esmMsg, binary.BigEndian, &qos)
+		fmt.Println("qos ", qos)
+		var ambr_len uint8
+		binary.Read(esmMsg, binary.BigEndian, &ambr_len)
+		fmt.Println("ambr len  ", ambr_len)
+		var ambr [6]uint8
+		binary.Read(esmMsg, binary.BigEndian, &ambr)
+		fmt.Println("ambr ", ambr)
+		fmt.Println("remaining bytes *****", esmMsg.Len())
+		for esmMsg.Len() > 0 {
+			var ieiN uint8
+			binary.Read(esmMsg, binary.BigEndian, &ieiN)
+			// fmt.Println("type", tmpIeiN)
+			switch ieiN {
+			case 89:
+				var cause uint8
+				binary.Read(esmMsg, binary.BigEndian, &cause)
+				fmt.Println("59 - gsm cause = ", cause)
+			case 41:
+				var iplen uint8
+				binary.Read(esmMsg, binary.BigEndian, &iplen)
+				fmt.Println("length of ip address = ", iplen)
+				var iptype uint8
+				binary.Read(esmMsg, binary.BigEndian, &iptype)
+				fmt.Println("type of address = ", iptype)
+				var ipaddr [4]uint8
+				binary.Read(esmMsg, binary.BigEndian, &ipaddr)
+				fmt.Println("ip address = ", ipaddr)
+				ip := net.IPv4(ipaddr[0], ipaddr[1], ipaddr[2], ipaddr[3])
+				a.Ipaddr = ip.String()
+				fmt.Println("ip address in string ", a.Ipaddr)
+				break // we just need ip address nothing more
+			default:
+				break
+			}
+		}
+
+	}
+
 	for buffer.Len() > 0 {
 		var ieiN uint8
 		var tmpIeiN uint8
